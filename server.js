const express = require('express');
const cors = require('cors');
const { MongoClient, ServerApiVersion } = require('mongodb');
const bcrypt = require('bcryptjs');
// const jwt = require('jsonwebtoken'); // Adicionaremos JWT em uma etapa futura

const app = express();
const PORT = process.env.PORT || 3000;
// const JWT_SECRET = process.env.JWT_SECRET; // Para JWT, em uma etapa futura

// --- Configura√ß√£o do MongoDB ---
const mongoUri = process.env.MONGODB_URI;
if (!mongoUri) {
    console.error("ERRO FATAL: MONGODB_URI n√£o est√° definida nas vari√°veis de ambiente.");
    process.exit(1);
}
const client = new MongoClient(mongoUri, {
    serverApi: { version: ServerApiVersion.v1, strict: true, deprecationErrors: true }
});
let db; // Vari√°vel para a inst√¢ncia do banco de dados

// Fun√ß√£o para conectar ao MongoDB
async function connectDB() {
    try {
        await client.connect();
        db = client.db("GPX7_DB"); // Certifique-se que "GPX7_DB" √© o nome do seu banco de dados na URI
        console.log("Conectado com sucesso ao MongoDB! ü•≠");
    } catch (err) {
        console.error("Falha ao conectar com o MongoDB ‚ùå", err);
        process.exit(1);
    }
}

// --- Middlewares ---
app.use(cors()); // Habilita CORS para todas as origens
app.use(express.json()); // Permite que o servidor entenda requisi√ß√µes com corpo em JSON

// --- Rotas ---
app.get('/', (req, res) => {
    res.send('üéâ Backend GPX7 v2 est√° funcionando e conectado ao MongoDB! üéâ');
});

// --- Rota de REGISTRO (ATUALIZADA) ---
app.post('/register', async (req, res) => {
    if (!db) {
        return res.status(500).json({ message: "Erro interno do servidor: Banco de dados n√£o conectado." });
    }

    const { username, email, password } = req.body; // Coletamos username, email e password

    // Valida√ß√£o dos campos recebidos
    if (!username || !email || !password) {
        return res.status(400).json({ message: 'Nome de usu√°rio, email e senha s√£o obrigat√≥rios.' });
    }
    if (username.length < 3) {
        return res.status(400).json({ message: 'Nome de usu√°rio deve ter pelo menos 3 caracteres.' });
    }
    if (password.length < 6) {
        return res.status(400).json({ message: 'A senha deve ter pelo menos 6 caracteres.' });
    }
    // Regex simples para validar username (alfanum√©rico, sem espa√ßos)
    if (!/^[a-zA-Z0-9_.-]+$/.test(username)) { // Permite letras, n√∫meros, underscore, ponto, h√≠fen
        return res.status(400).json({ message: 'Nome de usu√°rio deve conter apenas letras, n√∫meros e os caracteres "_", ".", "-".' });
    }
    // Valida√ß√£o simples de email
    if (!/\S+@\S+\.\S+/.test(email)) {
        return res.status(400).json({ message: 'Formato de email inv√°lido.' });
    }

    try {
        const usersCollection = db.collection('users'); // Acessa a cole√ß√£o 'users'

        // Verifica se o username OU email j√° existem (case insensitive)
        const existingUser = await usersCollection.findOne({
            $or: [
                { username: new RegExp(`^${username}$`, 'i') }, // Busca case-insensitive para username
                { email: new RegExp(`^${email}$`, 'i') }      // Busca case-insensitive para email
            ]
        });

        if (existingUser) {
            if (existingUser.username.toLowerCase() === username.toLowerCase()) {
                return res.status(409).json({ message: 'Este nome de usu√°rio j√° est√° em uso.' }); // 409 Conflict
            }
            if (existingUser.email.toLowerCase() === email.toLowerCase()) {
                return res.status(409).json({ message: 'Este email j√° est√° cadastrado.' }); // 409 Conflict
            }
        }

        // Hash da senha
        const saltRounds = 10;
        const hashedPassword = await bcrypt.hash(password, saltRounds);

        // Cria o novo usu√°rio
        const newUser = {
            username: username, // Pode optar por salvar em min√∫sculas: username.toLowerCase()
            email: email.toLowerCase(), // Salva email sempre em min√∫sculas
            password: hashedPassword,
            createdAt: new Date()
        };
        const result = await usersCollection.insertOne(newUser);

        console.log('Novo usu√°rio registrado:', newUser.username, 'Email:', newUser.email, 'ID:', result.insertedId);
        // Retorna apenas informa√ß√µes n√£o sens√≠veis do usu√°rio
        res.status(201).json({
            message: 'Usu√°rio registrado com sucesso!',
            user: { id: result.insertedId, username: newUser.username, email: newUser.email }
        });

    } catch (error) {
        console.error('Erro ao registrar usu√°rio:', error);
        res.status(500).json({ message: 'Erro interno ao tentar registrar usu√°rio.' });
    }
});

// --- Rota de LOGIN (ATUALIZADA - USA O BANCO DE DADOS) ---
app.post('/login', async (req, res) => {
    if (!db) {
        return res.status(500).json({ message: "Erro interno do servidor: Banco de dados n√£o conectado." });
    }

    const { loginIdentifier, password } = req.body; // loginIdentifier pode ser username ou email

    if (!loginIdentifier || !password) {
        return res.status(400).json({ message: 'Identificador de login (usu√°rio/email) e senha s√£o obrigat√≥rios.' });
    }

    try {
        const usersCollection = db.collection('users');
        
        // Procura pelo usu√°rio por username (case insensitive) OU email (case insensitive)
        const user = await usersCollection.findOne({
            $or: [
                { username: new RegExp(`^${loginIdentifier}$`, 'i') },
                { email: new RegExp(`^${loginIdentifier}$`, 'i') }
            ]
        });

        if (!user) {
            console.log('Falha no login: Usu√°rio/Email n√£o encontrado para ->', loginIdentifier);
            return res.status(401).json({ message: 'Credenciais inv√°lidas.' }); // Usu√°rio n√£o encontrado
        }

        // Compara a senha enviada com a senha hasheada no banco
        const isPasswordMatch = await bcrypt.compare(password, user.password);

        if (!isPasswordMatch) {
            console.log('Falha no login: Senha incorreta para ->', user.username);
            return res.status(401).json({ message: 'Credenciais inv√°lidas.' }); // Senha incorreta
        }

        // Login bem-sucedido
        console.log('Login bem-sucedido para:', user.username);
        
        // Por enquanto, n√£o enviaremos JWT, apenas dados b√°sicos do usu√°rio.
        // Em uma etapa futura, aqui voc√™ geraria um token JWT:
        // const payload = { userId: user._id, username: user.username };
        // const token = jwt.sign(payload, JWT_SECRET, { expiresIn: '1h' });
        // res.status(200).json({
        //     message: 'Login bem-sucedido!',
        //     token: token,
        //     user: { id: user._id, username: user.username, email: user.email }
        // });

        res.status(200).json({
            message: 'Login bem-sucedido!',
            user: {
                id: user._id, // ID do MongoDB
                username: user.username,
                email: user.email
            }
        });

    } catch (error) {
        console.error('Erro durante o login:', error);
        res.status(500).json({ message: 'Erro interno ao tentar fazer login.' });
    }
});

// --- Iniciar o servidor AP√ìS conectar ao DB ---
async function startServer() {
    await connectDB(); // Garante que o DB conectou antes de subir o servidor
    app.listen(PORT, () => {
        console.log(`Servidor backend GPX7 v2 rodando na porta ${PORT} üöÄ`);
        if (process.env.NODE_ENV !== 'production' && !process.env.RENDER) { // Evita log do localhost no Render
            console.log(`Acesse localmente em http://localhost:${PORT}`);
        }
    });
}

startServer(); // Chama a fun√ß√£o para iniciar o servidor
